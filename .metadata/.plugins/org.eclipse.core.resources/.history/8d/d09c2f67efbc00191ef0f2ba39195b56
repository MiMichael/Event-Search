package db.mongodb;

import java.util.List;
import java.util.Set;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.HashSet;

import db.DBConnection;
import entity.Item;
import entity.Item.ItemBuilder;
import external.TicketMasterAPI;

import db.mongodb.MongoDBConnection;
import db.mongodb.MongoDBUtil;

import org.bson.Document;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoDatabase;

import static com.mongodb.client.model.Filters.eq;


public class MongoDBConnection implements DBConnection {

	private MongoClient mongoClient;
	private MongoDatabase db;
	
	public MongoDBConnection() {
		try {
			mongoClient = new MongoClient();
			db = mongoClient.getDatabase(MongoDBUtil.DB_NAME);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void close() {
		// TODO Auto-generated method stub
		if (mongoClient != null) {
			try {
				mongoClient.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

	@Override
	public void setFavoriteItems(String userId, List<String> itemIds) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return;
		}
		try {
			db.getCollection("users").updateOne(eq("user_id", userId),
				new Document("$push", new Document("favorites", new Document("$each", itemIds))));
		} catch(Exception e) {
			e.printStackTrace();
		}
		


	}

	@Override
	public void unsetFavoriteItems(String userId, List<String> itemIds) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return;
		}
		try {
			db.getCollection("users").updateOne(new Document("user_id", userId), 
				new Document("$pullAll", new Document("favorites", itemIds)));
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		

	}

	@Override
	public Set<String> getFavoriteItemIds(String userId) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return null;
		}
		Set<String> favoriteItemsIds = new HashSet<>();
		try {
			FindIterable<Document> iterable = db.getCollection("users").find(eq("user_id", userId));
		
			if (iterable.first() != null && iterable.first().containsKey("favorites")) {
				@SuppressWarnings("unchecked")
				List<String> list = (List<String>) iterable.first().get("favorites");
				favoriteItemsIds.addAll(list);
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		return favoriteItemsIds;	
		

	}

	@Override
	public Set<Item> getFavoriteItems(String userId) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return null;
		}
		Set<Item> favoriteItems = new HashSet<>();
		try {
			Set<String> itemIds = getFavoriteItemIds(userId);
			for (String itemId : itemIds) {
				FindIterable<Document> iterable = db.getCollection("items").find(eq("item_id", itemId));
				if (iterable.first() != null) {
					Document doc = iterable.first();
					
					ItemBuilder builder = new ItemBuilder();
					builder.setItemId(doc.getString("item_id"));
					builder.setName(doc.getString("name"));
					builder.setAddress(doc.getString("address"));
					builder.setUrl(doc.getString("url"));
					builder.setImageUrl(doc.getString("image_url"));
					builder.setRating(doc.getDouble("rating"));
					builder.setDistance(doc.getDouble("distance"));
					builder.setCategories(getCategories(itemId));
					
					favoriteItems.add(builder.build());
				}
			}
		} catch(Exception e) {
				e.printStackTrace();
		}
		

		return favoriteItems;


	}

	@Override
	public Set<String> getCategories(String itemId) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return null;
		}
		Set<String> categories = new HashSet<>();
		try {
			FindIterable<Document> iterable = db.getCollection("items").find(eq("item_id", itemId));
		
			if (iterable.first() != null && iterable.first().containsKey("categories")) {
				@SuppressWarnings("unchecked")
				List<String> list = (List<String>) iterable.first().get("categories");
				categories.addAll(list);
			}

		} catch(Exception e) {
			e.printStackTrace();
		}
	
		
		return categories;

	}

	@Override
	public List<Item> searchItems(double lat, double lon, String term) {
		// TODO Auto-generated method stub
		TicketMasterAPI ticketMasterAPI = new TicketMasterAPI();
	    List<Item> items = ticketMasterAPI.search(lat, lon, term);
        for(Item item : items) {
        	saveItem(item);
        }

        return items;

	}

	@Override
	public void saveItem(Item item) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return;
		}
		
		try {
			// help exceute sql in database
			FindIterable<Document> iterable = db.getCollection("items").find(eq("items_id", item.getItemId()));
			if (iterable.first() == null) {
				db.getCollection("items").insertOne(new Document()
						.append("item_id", item.getItemId())
						.append("distance", item.getDistance())
						.append("name", item.getName())
						.append("address", item.getAddress())
						.append("url", item.getUrl())
						.append("image_url", item.getImageUrl())
						.append("rating", item.getRating())
						.append("categories", item.getCategories())
				);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}

	@Override
	public String getFullname(String userId) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return null;
		}
		String name = "";
		try {
			FindIterable<Document> iterable = db.getCollection("users").find(eq("user_id", userId));
			if (iterable.first() != null) {
				Document doc = iterable.first();
				name = doc.getString("first_name") + " " + doc.getString("last_name");
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return name;

	}

	@Override
	public boolean verifyLogin(String userId, String password) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return false;
		}
		try {
			FindIterable<Document> iterable = db.getCollection("users").find(eq("user_id", userId));
			if (iterable.first() != null) {
				Document doc = iterable.first();
				return doc.getString("password").equals(password);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;

	}

	@Override
	public boolean registerUser(String userId, String password, String firstname, String lastname) {
		// TODO Auto-generated method stub
		if (mongoClient == null) {
			System.err.println("DB connection failed");
			return false;
		}
		try {
			FindIterable<Document> iterable = db.getCollection("users").find(eq("user_id", userId));
			if (iterable.first() == null) {
				db.getCollection("users").insertOne(new Document()
						.append("user_id", userId)
						.append("password", password)
						.append("first_name", firstname)
						.append("last_name", lastname));
				return true;
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

}
